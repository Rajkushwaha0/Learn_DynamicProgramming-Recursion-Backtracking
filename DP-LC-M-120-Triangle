class Solution {
    public int minimumTotal(List<List<Integer>> tri) {
        int n = tri.size();

        //For Recursion
        return rec(0,0,n,tri);


        //For memoisation 
        int[][] dp = new int[n][n];
        for(int[] row:dp){
            Arrays.fill(row,-1);
        }
        return memo(0,0,n,tri,dp);

        //For tabulation
        return tab(tri,n);

    }
    public int rec(int i , int j , int n,List<List<Integer>> tri){
        if(i== n-1) return tri.get(i).get(j);

        int below = tri.get(i).get(j)+rec(i+1,j,n,tri);
        int dia = tri.get(i).get(j)+rec(i+1,j+1,n,tri);
        return Math.min(below,dia);

    }
    public int memo(int i , int j , int n,List<List<Integer>> tri,int[][] dp ){
        if(i== n-1) return tri.get(i).get(j);
        if(dp[i][j]!= -1) return dp[i][j];

        int below = tri.get(i).get(j)+memo(i+1,j,n,tri,dp);
        int dia = tri.get(i).get(j)+memo(i+1,j+1,n,tri,dp);
        return dp[i][j]=Math.min(below,dia);

    }
    public int tab(List<List<Integer>> tri,int n){
        int[][]dp =new int[n][n];
        for(int j=0;j<n;j++){
            dp[n-1][j]=tri.get(n-1).get(j);
        }
        for(int i = n-2;i>=0;i--){
            for(int j=i;j>=0;j--){
                int down = tri.get(i).get(j)+dp[i+1][j];
                int dia = tri.get(i).get(j)+dp[i+1][j+1];
                dp[i][j]=Math.min(down,dia);
            }
        }
        return dp[0][0];
    }
    
}
