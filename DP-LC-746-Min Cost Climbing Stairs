class Solution {

//Recursive Solution
    public int minCostClimbingStairs(int[] cost) {
        int n=cost.length;
        return Math.min(solve(cost,n-1),solve(cost,n-2));
        
    }
    public int solve(int[] cost,int i){
        if(i==0 || i==1) {
            return cost[i];
        }        
        return cost[i]+Math.min(solve(cost,i-1),solve(cost,i-2));
    }

//Memoization Solution 
    public int minCostClimbingStairs(int[] cost) {
        int n=cost.length;
        int[] dp = new int[n+1];
        for(int i=0;i<=n;i++) dp[i]=-1;
        return Math.min(solve(cost,n-1,dp),solve(cost,n-2,dp));
        
    }
    public int solve(int[] cost,int i,int[] dp){
        if(i==0 || i==1) {
            return cost[i];
        }        
        if(dp[i]!= -1) return dp[i];
        dp[i]=cost[i]+Math.min(solve(cost,i-1,dp),solve(cost,i-2,dp));
        return dp[i];
    }

//Tabulation
    public int minCostClimbingStairs(int[] cost) {
        int n=cost.length;
        int[] dp = new int[n+1];
        dp[0]=cost[0];
        dp[1]=cost[1];      
        for(int i=2;i<n;i++){
            dp[i]=cost[i]+Math.min(dp[i-1],dp[i-2]);
        }
        return Math.min(dp[n-1],dp[n-2]);
        
    }
}
