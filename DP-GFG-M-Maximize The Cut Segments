Cut into segments

public class Solution {
    public static int cutSegments(int n, int x, int y, int z) {
        // Write your code here.
        int[] arr = {x,y,z};
        int[] dp = new int[n+1];
        Arrays.fill(dp, -1);
        int m = solve(n,arr,dp);
        if(m==Integer.MIN_VALUE) return 0;
        return m;
    }
    public static int solve(int x , int[] arr,int[] dp){
        if(x==0) return 0;
        if(x<0) return Integer.MIN_VALUE;
        if(dp[x]!= -1) return dp[x];
        int max=Integer.MIN_VALUE;
        for(int i=0;i<arr.length;i++){
            int m = solve(x-arr[i],arr,dp);
            if(m!=Integer.MIN_VALUE) max=Math.max(max,m+1);
        }
        return dp[x]=max;
    }


}


Actual solution->
public class Solution {
    public static int cutSegments(int n, int x, int y, int z) {
        // Write your code here.

        //Memoization
        int[] dp = new int[n+1];
        Arrays.fill(dp, -1);
        int m = solveMemo(n,x,y,z,dp);
        if(m<0) return 0;
        return m;


        //Recursion
        int m = solveRec(n,x,y,z);
        if(m<0) return 0;
        return m;


        //Tabulation
        int m = solveTab(n,x,y,z);
        if(m<0) return 0;
        return m;
    }

    public static int solveTab(int n , int x , int y , int z){
        int[] dp = new int[n+1];
        Arrays.fill(dp,Integer.MIN_VALUE);
        dp[0]=0;
        for(int i=0;i<=n;i++){
            if(i-x>=0){
                dp[i]=Math.max(dp[i],dp[i-x]+1);
            }
            if(i-y>=0){
                dp[i]=Math.max(dp[i],dp[i-y]+1);
            }
            if(i-z>=0){
                dp[i]=Math.max(dp[i],dp[i-z]+1);
            }
        }
        return dp[n];
    }
    public static int solveRec(int n , int x , int y , int z){
        if(n==0) return 0;
        if(n<0) return Integer.MIN_VALUE;
        int a = solveRec(n-x,x,y,z)+1;
        int b = solveRec(n-y,x,y,z)+1;
        int c = solveRec(n-z,x,y,z)+1;
        int max=Math.max(a,Math.max(b,c));
        return max;
    }

    public static int solveMemo(int n , int x , int y , int z,int[] dp){
        if(n==0) return 0;
        if(n<0) return Integer.MIN_VALUE;
        if(dp[n]!= -1) return dp[n];
        int a = solveMemo(n-x,x,y,z,dp)+1;
        int b = solveMemo(n-y,x,y,z,dp)+1;
        int c = solveMemo(n-z,x,y,z,dp)+1;
        dp[n]=Math.max(a,Math.max(b,c));
        return dp[n];
    }


}
