class Solution {
    public int coinChange(int[] coins, int amount) {
        //for solveMemo
        int[] dp = new int[amount+1];
        for(int i=0;i<=amount;i++) dp[i]=-1;
        int n=solveMemo(coins,amount,dp);
        if(n== Integer.MAX_VALUE) return -1;
        return n;

        //For solveTab
        return solveTab(coins,amount);

        // for solveRec
        int n=solveRec(coins,amount);
        if(n== Integer.MAX_VALUE) return -1;
        return n;
    }
    public int solveRec(int[] coin,int x){
        //BASE CASE
        if(x==0) return 0;
        if(x<0) return Integer.MAX_VALUE;

        int min= Integer.MAX_VALUE;
        for(int i=0;i<coin.length;i++){
            int ans=solve(coin,x-coin[i]);
            if(ans!= Integer.MAX_VALUE) min=Math.min(min,ans+1);
        }
        
        return min;
    }

    public int solveMemo (int[] coin , int x , int[] dp){
        //BASE CASE
        if(x==0) return 0;
        if(x<0) return Integer.MAX_VALUE;

        if(dp[x] != -1) return dp[x];
        
        int min= Integer.MAX_VALUE;
        for(int i=0;i<coin.length;i++){
            int ans=solveMemo(coin,x-coin[i],dp);
            if(ans!= Integer.MAX_VALUE) min=Math.min(min,ans+1);
        }
        dp[x]=min;
        
        return min;
    }


    public int solveTab (int[] nums , int x){
        int[] dp = new int [x+1];
        for(int i=0;i<=x;i++) dp[i]=Integer.MAX_VALUE;
        dp[0] = 0;


        for(int i=1;i<=x;i++){
            for(int j=0;j<nums.length;j++){
                if((i-nums[j])>=0 && dp[i-nums[j]]!= Integer.MAX_VALUE){
                    dp[i]=Math.min(dp[i],1+dp[i-nums[j]]);
                }
            }

        }
        if(dp[x]!= Integer.MAX_VALUE) return dp[x];
        return -1;
    }
}
