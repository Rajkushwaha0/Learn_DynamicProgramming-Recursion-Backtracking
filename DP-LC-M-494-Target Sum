//O(2^n)
// Backtracking method
// class Solution {
//     public int count=0;
//     public int findTargetSumWays(int[] nums, int target) {
//         solve(nums,0,target,0);
//         return count;
//     }

//     public void solve(int[] nums,int i,int target,int sum){
//         if(i==nums.length){
//             if(sum==target) count++;
//             return ;
//         }
//         solve(nums,i+1,target,sum+nums[i]);
//         solve(nums,i+1,target,sum-nums[i]);
//         return ;
//     }

// }

// O(2^N)
// Dp recurrsion 
class Solution {
    public int findTargetSumWays(int[] nums, int target) {
        int[] dp = new int[nums.length];
        Arrays.fill(dp,-1);
        return recur(nums,0,target,0);
        
       
    }

    public int recur(int[] nums,int i,int target,int sum){
        if(i==nums.length){
            if(sum==target) return 1;
            return 0;
        }
        int count=0;
        count+=recur(nums,i+1,target,sum+nums[i]);
        count+=recur(nums,i+1,target,sum-nums[i]);
        return count;
    }
}
