class Solution {
    public int minPathSum(int[][] grid) {
        int m = grid.length;
        int n = grid[0].length;
        int[][] dp = new int[m][n];
        for(int[] row : dp){
            Arrays.fill(row,Integer.MAX_VALUE);
        }
        //return rec(m-1,n-1,grid);
        return memo(m-1,n-1,grid,dp);
    }
    public int rec(int i , int j , int[][] grid){
        int ans=Integer.MAX_VALUE;
        if(i==0 && j==0 ) return grid[i][j];
        if(i<0 || j<0) return Integer.MAX_VALUE;

        int m = grid[i][j]+Math.min(rec(i-1,j,grid),rec(i,j-1,grid));
        ans=Math.min(ans,m);
        return ans;
    }
    public int memo(int i , int j , int[][] grid,int[][]dp ){
        int ans=Integer.MAX_VALUE;
        if(i==0 && j==0 ) return grid[i][j];
        if(i<0 || j<0) return Integer.MAX_VALUE;
        if(dp[i][j]!=Integer.MAX_VALUE ) return dp[i][j];

        int m = grid[i][j]+Math.min(memo(i-1,j,grid,dp),memo(i,j-1,grid,dp));
        ans=Math.min(ans,m);
        return dp[i][j]=ans;
    }
}
