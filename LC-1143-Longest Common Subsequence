link: https://leetcode.com/problems/longest-common-subsequence/

class Solution {
    public int longestCommonSubsequence(String s1, String s2) {
        int m=s1.length();
        int n=s2.length();
        int[][] dp = new int[m+1][n+1];
        for (int[] innerArr: dp) {
            Arrays.fill(innerArr, -1);
        }
        int ans=lcs(s1,s2,m,n,dp);
        return ans;
    }
    //Recursive
    public int lcs(String s1, String s2, int m, int n ,int[][] dp){
        if(m==0 || n==0 ){
            return 0;
        }
        if(s1.charAt(m-1)== s2.charAt(n-1)){
            return 1+lcs(s1,s2,m-1,n-1,dp);
        }
        return Math.max(lcs(s1,s2,m,n-1,dp),lcs(s1,s2,m-1,n,dp))
    }
    //Memory Optimization
    public int lcs(String s1, String s2, int m, int n ,int[][] dp){
        if(m==0 || n==0 ){
            dp[m][n]=0;
            return dp[m][n];
        }
        if(dp[m][n]!= -1){
            return dp[m][n];
        }
        else if(s1.charAt(m-1)== s2.charAt(n-1)){
            dp[m][n]=1+lcs(s1,s2,m-1,n-1,dp);
            return dp[m][n];
        }
        dp[m][n]=Math.max(lcs(s1,s2,m,n-1,dp),lcs(s1,s2,m-1,n,dp));
        return dp[m][n];
    }
    //Tabulation
    public int lcs(String s1, String s2, int m, int n ,int[][] dp){
        for(int i=0;i<=m;i++){
            for(int j=0;j<=n;j++){
                if (i==0 || j==0 ) dp[i][j]=0;
                else if (s1.charAt(i-1)==s2.charAt(j-1)) dp[i][j]=1+dp[i-1][j-1];
                else dp[i][j]=Math.max(dp[i][j-1],dp[i-1][j]);
            }
        }
        return dp[m][n];
    }
    
}
