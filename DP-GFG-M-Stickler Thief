Same as lc house robber


class Solution
{
    //Function to find the maximum money the thief can get.
    public int FindMaxSum(int arr[], int n)
    {
        // Your code here
        int[] dp =new int[n+1];
        Arrays.fill(dp,-1);
        //return memoization(arr,0,dp); 
        //return recursion(arr,0);
        return tabular(arr,n);
        
    }
    //Not optimized
    public static int recursion(int[] arr , int i){
        if(i>=arr.length) return 0;
        int ans=0;
        
        int pick = arr[i]+recursion(arr,i+2);
        int notpick = recursion(arr,i+1);
        return Math.max(pick,notpick);
    }
    
    //Partially optimized
    public static int memoization(int[] arr , int i,int[] dp){
        if(i>=arr.length) return 0;
        if(dp[i]!= -1) return dp[i];
        int ans=0;
        
        int pick = arr[i]+memoization(arr,i+2,dp);
        int notpick = memoization(arr,i+1,dp);
        dp[i]=Math.max(pick,notpick);
        return dp[i];
    }
    public static int tabular(int[] arr,int n){
        int[] dp = new int[n+1];
        dp[0]=arr[0];
        if(arr.length==1) return arr[0];
        dp[1]=Math.max(arr[1],arr[0]);
        for(int i=2;i<n;i++){
            int pick = dp[i-2]+arr[i];
            int notpick=dp[i-1];
            dp[i]=Math.max(pick,notpick);
        }
        return dp[n-1];
    }
    
    
}
