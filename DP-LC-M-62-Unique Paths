class Solution {
    public int uniquePaths(int m, int n) {
        // int[][] dp=new int[m][n];
        // for (int[] innerArr: dp) {
        //     Arrays.fill(innerArr, -1);
        // }
        // return solve(0,0,m,n,dp);
        //return tabulation(m,n);
        return spaceopti(m,n);
    }
    //Memory Optimization
    public int solve(int i,int j,int m , int n , int[][] dp){
        if(i>=m|| j>=n) return 0;
        if(i==m-1 && j==n-1) return 1;
        if(dp[i][j]!= -1) return dp[i][j];
        else dp[i][j]= solve(i+1,j,m,n,dp)+solve(i,j+1,m,n,dp);
        return dp[i][j];

    }
    //tabulation
    public int tabulation (int m,int n){
        int[][] map = new int[m][n];
        map[0][0]=1;
        for(int i = 0;i<m;i++){
            for(int j = 0;j<n;j++){
                if(i==0 && j==0) map[0][0]=1;
                else{
                int up=0,down=0;
                if(i>0) up = map[i-1][j];
                if(j>0) down = map[i][j-1];
                map[i][j] = up+down;
                }
            }
        }
        return map[m-1][n-1];
    }
    
    
    
    //IMPORTANT
    public int spaceopti(int m,int n){
        int[] perv =new int[n];
        for(int i = 0;i<m;i++){
            int[] curr =new int[n];
            for(int j = 0;j<n;j++){
                if(i==0 && j==0) curr[j]=1; 
                else{
                int up=0,down=0;
                if(i>0) up = perv[j];
                if(j>0) down = curr[j-1];
                curr[j] = up+down;
                }
            }
            perv=curr;
        }
        return perv[n-1];

    }
}
